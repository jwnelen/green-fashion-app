name: 'Build and Push Docker Image'
description: 'Build Docker image and push to Google Container Registry'

inputs:
  service-name:
    description: 'Name of the service (api, ml-api, frontend)'
    required: true
  dockerfile-path:
    description: 'Path to the Dockerfile'
    required: true
  context-path:
    description: 'Docker build context path'
    required: true
    default: '.'
  gcp-project-id:
    description: 'GCP Project ID'
    required: true
  environment:
    description: 'Environment (dev/prod)'
    required: true
  build-args:
    description: 'Additional Docker build arguments'
    required: false
    default: ''

outputs:
  image-url:
    description: 'Full URL of the pushed image'
    value: ${{ steps.image.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Generate image metadata
      id: image
      shell: bash
      run: |
        IMAGE_TAG="${{ github.sha }}-${{ inputs.environment }}"
        IMAGE_URL="gcr.io/${{ inputs.gcp-project-id }}/${{ inputs.service-name }}:${IMAGE_TAG}"
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "url=${IMAGE_URL}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_CREDENTIALS }}

    - name: Configure Docker for GCR
      shell: bash
      run: |
        gcloud auth configure-docker gcr.io

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context-path }}
        file: ${{ inputs.dockerfile-path }}
        push: true
        tags: |
          ${{ steps.image.outputs.url }}
          gcr.io/${{ inputs.gcp-project-id }}/${{ inputs.service-name }}:latest-${{ inputs.environment }}
        cache-from: type=registry,ref=gcr.io/${{ inputs.gcp-project-id }}/${{ inputs.service-name }}:buildcache
        cache-to: type=registry,ref=gcr.io/${{ inputs.gcp-project-id }}/${{ inputs.service-name }}:buildcache,mode=max
        build-args: |
          ${{ inputs.build-args }}
          BUILD_ENV=${{ inputs.environment }}
