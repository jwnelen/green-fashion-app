name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'blue-green'
        type: choice
        options:
        - blue-green
        - rolling
        - canary

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  ENVIRONMENT: prod
  SERVICE_NAME: green-fashion-prod

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run pre-deployment checks
      id: check
      run: |
        # Check if this is a tagged release or main branch
        if [[ "${{ github.ref }}" == refs/tags/* ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi

    - name: Security scan
      run: |
        pip install bandit safety
        bandit -r green_fashion/ -ll || exit 1
        safety check || exit 1

  deploy:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.service_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker

    - name: Build and push Docker image
      env:
        IMAGE_TAG: gcr.io/${{ env.GCP_PROJECT_ID }}/green-fashion:${{ github.sha }}
        PROD_TAG: gcr.io/${{ env.GCP_PROJECT_ID }}/green-fashion:prod-${{ github.sha }}
      run: |
        docker build -t $IMAGE_TAG -t $PROD_TAG .
        docker push $IMAGE_TAG
        docker push $PROD_TAG

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform init
      working-directory: ./terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY_PROD }}
      run: |
        terraform init -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}"

    - name: Terraform plan
      working-directory: ./terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY_PROD }}
        TF_VAR_project_id: ${{ env.GCP_PROJECT_ID }}
        TF_VAR_environment: ${{ env.ENVIRONMENT }}
        TF_VAR_container_image: gcr.io/${{ env.GCP_PROJECT_ID }}/green-fashion:${{ github.sha }}
        TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI_PROD }}
      run: |
        terraform plan -var-file="environments/prod.tfvars" -out=tfplan

    - name: Manual approval
      if: github.event_name != 'workflow_dispatch'
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.PROD_APPROVERS }}
        minimum-approvals: 2
        issue-title: "Deploy green-fashion to production"
        issue-body: |
          Please review and approve the production deployment.

          **Changes:**
          - Commit: ${{ github.sha }}
          - Branch/Tag: ${{ github.ref }}

          **Terraform Plan:**
          See the plan output in the workflow logs.

    - name: Terraform apply
      id: deploy
      working-directory: ./terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY_PROD }}
        TF_VAR_project_id: ${{ env.GCP_PROJECT_ID }}
        TF_VAR_environment: ${{ env.ENVIRONMENT }}
        TF_VAR_container_image: gcr.io/${{ env.GCP_PROJECT_ID }}/green-fashion:${{ github.sha }}
        TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI_PROD }}
      run: |
        terraform apply -auto-approve tfplan
        SERVICE_URL=$(terraform output -raw service_url)
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Production smoke tests
      env:
        SERVICE_URL: ${{ steps.deploy.outputs.service_url }}
      run: |
        echo "Running smoke tests against: $SERVICE_URL"

        # Health check
        curl -f "$SERVICE_URL/_stcore/health" || exit 1

        # Basic functionality test
        response=$(curl -s "$SERVICE_URL" | grep -o "Fashion Classifier" | head -1)
        if [ "$response" != "Fashion Classifier" ]; then
          echo "❌ Smoke test failed: Expected 'Fashion Classifier' in response"
          exit 1
        fi

        echo "✅ All smoke tests passed"

    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          🚀 **Production Deployment**

          **Service URL:** ${{ steps.deploy.outputs.service_url }}
          **Commit:** ${{ github.sha }}
          **Deployed at:** ${{ github.event.head_commit.timestamp }}

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_PROD }}
        fields: repo,message,commit,author,took
        custom_payload: |
          {
            attachments: [{
              color: 'good',
              title: '🚀 Production Deployment Successful',
              fields: [{
                title: 'Service URL',
                value: '${{ steps.deploy.outputs.service_url }}',
                short: false
              }]
            }]
          }

    - name: Rollback on failure
      if: failure()
      working-directory: ./terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY_PROD }}
      run: |
        echo "🔄 Rolling back deployment..."
        # Get the previous successful deployment
        PREVIOUS_IMAGE=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format="value(spec.template.spec.template.spec.containers[0].image)" 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_IMAGE" ] && [ "$PREVIOUS_IMAGE" != "gcr.io/${{ env.GCP_PROJECT_ID }}/green-fashion:${{ github.sha }}" ]; then
          echo "Rolling back to: $PREVIOUS_IMAGE"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image="$PREVIOUS_IMAGE" \
            --region=${{ env.GCP_REGION }} \
            --quiet
        fi

    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_PROD }}
        fields: repo,message,commit,author
