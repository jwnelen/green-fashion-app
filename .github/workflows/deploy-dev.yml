name: Deploy to Development

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS_DEV }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET_DEV }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      classifier: ${{ steps.filter.outputs.classifier }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'services/api/**'
              - 'packages/**'
              - 'requirements.txt'
              - 'pyproject.toml'
            classifier:
              - 'services/classifier_api/**'
              - 'packages/**'
              - 'requirements.txt'
              - 'pyproject.toml'
            infrastructure:
              - 'infrastructure/**'
              - '.github/workflows/**'

  build-api:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api == 'true'
    outputs:
      image-url: ${{ steps.build.outputs.image-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Build and Push API Docker Image
        id: build
        uses: ./.github/actions/build-docker
        with:
          service-name: api
          dockerfile-path: services/api/Dockerfile
          context-path: .
          gcp-project-id: ${{ env.GCP_PROJECT_ID }}
          environment: dev

  build-classifier-api:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.classifier == 'true'
    outputs:
      image-url: ${{ steps.build.outputs.image-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Build and Push Classifier API Docker Image
        id: build
        uses: ./.github/actions/build-docker
        with:
          service-name: classifier-api
          dockerfile-path: services/classifier_api/Dockerfile
          context-path: .
          gcp-project-id: ${{ env.GCP_PROJECT_ID }}
          environment: dev

  run-migrations:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Run Database Migrations
        working-directory: services/api
        run: |
          uv sync
          uv run alembic upgrade head
        env:
          MYSQL_CONNECTION_STRING: ${{ secrets.MYSQL_CONNECTION_STRING_DEV }}

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-api, build-classifier-api, run-migrations]
    if: always() && (needs.detect-changes.outputs.infrastructure == 'true' || needs.build-api.result == 'success' || needs.build-classifier-api.result == 'success' || needs.run-migrations.result == 'success')

    steps:
      - uses: actions/checkout@v4

      - name: Apply Terraform
        uses: ./.github/actions/terraform-apply
        with:
          environment: dev
          working-directory: infrastructure/environments/dev
          apply: 'true'
          additional-vars: |
            {
              "project_id": "${{ env.GCP_PROJECT_ID }}",
              "environment": "dev",
              "container_image": "${{ needs.build-api.outputs['image-url'] || format('gcr.io/{0}/api:latest-dev', env.GCP_PROJECT_ID) }}",
              "classifier_api_container_image": "${{ needs.build-classifier-api.outputs['image-url'] || format('gcr.io/{0}/classifier-api:latest-dev', env.GCP_PROJECT_ID) }}"
            }
