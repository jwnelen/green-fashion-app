name: Deploy Infrastructure

on:
  # push:
  #   branches: [ main, develop ]
  #   paths:
  #     # Trigger when infrastructure code changes
  #     - 'terraform/**'
  #     - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      container_image:
        description: 'Container image to deploy (optional - uses latest if not specified)'
        required: false
        type: string

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      tfvars_file: ${{ steps.env.outputs.tfvars_file }}
    steps:
    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENV="${{ inputs.environment }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENV="prod"
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          ENV="dev"
        else
          ENV="dev"
        fi

        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "tfvars_file=environments/${ENV}.tfvars" >> $GITHUB_OUTPUT
        echo "Deploying to environment: $ENV"

  get-latest-image:
    runs-on: ubuntu-latest
    outputs:
      container_image: ${{ steps.image.outputs.container_image }}
    steps:
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Get latest container image
      id: image
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -n "${{ inputs.container_image }}" ]]; then
          IMAGE="${{ inputs.container_image }}"
        else
          # Look for latest tag first, then branch-specific tag
          TAG=$(gcloud container images list-tags gcr.io/${{ env.GCP_PROJECT_ID }}/green-fashion \
            --filter="tags:latest" --limit=1 --format='value(tags[0])')

          if [[ -z "$TAG" ]]; then
            # Fallback to any tagged image, sorted by digest (more reliable than timestamp)
            TAG=$(gcloud container images list-tags gcr.io/${{ env.GCP_PROJECT_ID }}/green-fashion \
              --filter="tags:*" --limit=1 --sort-by=~digest --format='value(tags[0])')
          fi

          if [[ -z "$TAG" ]]; then
            echo "No tagged container image found. Please build and push an image first."
            exit 1
          fi

          IMAGE="gcr.io/${{ env.GCP_PROJECT_ID }}/green-fashion:$TAG"
        fi

        echo "container_image=$IMAGE" >> $GITHUB_OUTPUT
        echo "Using container image: $IMAGE"

  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, get-latest-image]
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform init
      working-directory: ./terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      run: |
        terraform init

    - name: Terraform plan
      working-directory: ./terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ env.GCP_PROJECT_ID }}
        TF_VAR_environment: ${{ needs.determine-environment.outputs.environment }}
        TF_VAR_container_image: ${{ needs.get-latest-image.outputs.container_image }}
      run: |
        terraform plan -var-file="${{ needs.determine-environment.outputs.tfvars_file }}" -out=tfplan

        # Save plan summary
        terraform show -no-color tfplan > plan-output.txt

    - name: Comment PR with plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/plan-output.txt', 'utf8');
          const truncatedPlan = plan.length > 60000 ? plan.substring(0, 60000) + '...\n\n**Plan output truncated**' : plan;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Terraform Plan\n\n**Environment:** ${{ needs.determine-environment.outputs.environment }}\n**Container Image:** ${{ needs.get-latest-image.outputs.container_image }}\n\n<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${truncatedPlan}\n\`\`\`\n\n</details>`
          });

    - name: Terraform apply
      if: github.event_name != 'pull_request'
      working-directory: ./terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ env.GCP_PROJECT_ID }}
        TF_VAR_environment: ${{ needs.determine-environment.outputs.environment }}
        TF_VAR_container_image: ${{ needs.get-latest-image.outputs.container_image }}
      run: |
        terraform apply -auto-approve tfplan

    - name: Get service URL
      if: github.event_name != 'pull_request'
      working-directory: ./terraform
      run: |
        SERVICE_URL=$(terraform output -raw service_url)
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        echo "‚úÖ Deployed to: $SERVICE_URL" >> $GITHUB_STEP_SUMMARY

    - name: Health check
      if: github.event_name != 'pull_request'
      run: |
        echo "Waiting for service to be ready..."
        sleep 60

        for i in {1..5}; do
          if curl -f "${{ env.SERVICE_URL }}/_stcore/health"; then
            echo "‚úÖ Health check passed"
            echo "üöÄ Deployment successful: ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo "‚è≥ Attempt $i failed, retrying in 30s..."
          sleep 30
        done

        echo "‚ùå Health check failed after 5 attempts"
        exit 1
