name: Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]
      force_infrastructure:
        description: 'Force infrastructure deployment'
        required: false
        default: false
        type: boolean

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GREEN_FASHION_IMAGE_NAME: green-fashion
  CLASSIFIER_API_IMAGE_NAME: classifier-api

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      application: ${{ steps.changes.outputs.application }}
      environment: ${{ steps.env.outputs.environment }}
      tfvars_file: ${{ steps.env.outputs.tfvars_file }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            infrastructure:
              - 'terraform/**'
              - '.github/workflows/deploy-full.yml'
              - '.github/workflows/deploy-infrastructure.yml'
            application:
              - 'green_fashion/**'
              - 'streamlit_app/**'
              - 'notebooks/**'
              - 'Dockerfile'
              - 'requirements.txt'
              - 'pyproject.toml'
              - 'uv.lock'
              - '.dockerignore'
            classifier_api:
              - 'classifier_api/**'

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="prod"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENV="dev"
          else
            ENV="dev"
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "tfvars_file=environments/${ENV}.tfvars" >> $GITHUB_OUTPUT

  build-green-fashion:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.application == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      primary-tag: ${{ steps.primary.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.GREEN_FASHION_IMAGE_NAME }}
          tags: |
            type=sha,format=short           # Always first = primary tag
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmm'}}

      - name: Debug metadata output
        run: |
          echo "Generated tags:"
          echo '${{ steps.meta.outputs.tags }}'
          echo "JSON output:"
          echo '${{ steps.meta.outputs.json }}'

      - name: Get primary tag (commit SHA)
        id: primary
        run: |
          SHA_TAG=$(echo '${{ steps.meta.outputs.json }}' | jq -r '.tags[] | select(test(":sha-[0-9a-f]{7}$"))' | head -n 1)
          echo "Primary tag (SHA): $SHA_TAG"
          echo "tag=$SHA_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test Docker container
        if: github.event_name == 'pull_request'
        run: |
          # Start test MongoDB
          docker run --rm -d --name test-mongodb -p 27017:27017 mongo:7
          sleep 10

          docker pull ${{ steps.primary.outputs.tag }}
          docker run --rm -d -p 8000:8000 --name test-container -e MONGODB_URI="mongodb://172.17.0.1:27017/test" ${{ steps.primary.outputs.tag }}
          echo "Waiting for container to start..."
          sleep 30
          echo "Checking container logs:"
          docker logs test-container
          echo "Testing health endpoint:"
          curl -f http://localhost:8000/health || exit 1

          # Cleanup
          docker stop test-container
          docker stop test-mongodb

  build-classifier-api:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.classifier_api == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      primary-tag: ${{ steps.primary.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.CLASSIFIER_API_IMAGE_NAME }}
          tags: |
            type=sha,format=short           # Always first = primary tag
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmm'}}

      - name: Debug metadata output
        run: |
          echo "Generated tags:"
          echo '${{ steps.meta.outputs.tags }}'
          echo "JSON output:"
          echo '${{ steps.meta.outputs.json }}'

      - name: Get primary tag (commit SHA)
        id: primary
        run: |
          SHA_TAG=$(echo '${{ steps.meta.outputs.json }}' | jq -r '.tags[] | select(test(":sha-[0-9a-f]{7}$"))' | head -n 1)
          echo "Primary tag (SHA): $SHA_TAG"
          echo "tag=$SHA_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: classifier_api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test Docker container
        if: github.event_name == 'pull_request'
        run: |
          docker pull ${{ steps.primary.outputs.tag }}
          docker run --rm -d -p 8001:8001 --name test-classifier-container ${{ steps.primary.outputs.tag }}
          echo "Waiting for container to start..."
          sleep 30
          echo "Checking container logs:"
          docker logs test-classifier-container
          echo "Testing health endpoint:"
          curl -f http://localhost:8001/health || exit 1

          # Cleanup
          docker stop test-classifier-container

  deploy:
    runs-on: ubuntu-latest
    needs: [changes, build-green-fashion, build-classifier-api]
    if: |
      always() &&
      github.event_name != 'pull_request' &&
      (needs.build-green-fashion.result == 'success' || needs.build-green-fashion.result == 'skipped') &&
      (needs.build-classifier-api.result == 'success' || needs.build-classifier-api.result == 'skipped') &&
      (needs.changes.outputs.infrastructure == 'true' ||
       needs.changes.outputs.application == 'true' ||
       needs.changes.outputs.classifier_api == 'true' ||
       inputs.force_infrastructure == true)
    environment:
      name: ${{ needs.changes.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Determine container images
        id: images
        run: |
          # Green Fashion API image
          if [[ "${{ needs.build-green-fashion.outputs.primary-tag }}" != "" ]]; then
            GREEN_FASHION_IMAGE="${{ needs.build-green-fashion.outputs.primary-tag }}"
          else
            TAG=$(gcloud container images list-tags gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.GREEN_FASHION_IMAGE_NAME }} \
              --filter="tags:${{ github.ref_name }}" \
              --limit=1 \
              --sort-by=~timestamp \
              --format='value(tags[0])')

            if [[ -z "$TAG" ]]; then
              TAG=$(gcloud container images list-tags gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.GREEN_FASHION_IMAGE_NAME }} \
                --filter="tags:*" \
                --limit=1 \
                --sort-by=~timestamp \
                --format='value(tags[0])')
            fi

            if [[ -z "$TAG" ]]; then
              echo "No tagged green fashion image found. Please build and push an image first."
              exit 1
            fi

            GREEN_FASHION_IMAGE="gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.GREEN_FASHION_IMAGE_NAME }}:$TAG"
          fi

          # Classifier API image
          if [[ "${{ needs.build-classifier-api.outputs.primary-tag }}" != "" ]]; then
            CLASSIFIER_API_IMAGE="${{ needs.build-classifier-api.outputs.primary-tag }}"
          else
            TAG=$(gcloud container images list-tags gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.CLASSIFIER_API_IMAGE_NAME }} \
              --filter="tags:${{ github.ref_name }}" \
              --limit=1 \
              --sort-by=~timestamp \
              --format='value(tags[0])')

            if [[ -z "$TAG" ]]; then
              TAG=$(gcloud container images list-tags gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.CLASSIFIER_API_IMAGE_NAME }} \
                --filter="tags:*" \
                --limit=1 \
                --sort-by=~timestamp \
                --format='value(tags[0])')
            fi

            if [[ -z "$TAG" ]]; then
              echo "No tagged classifier API image found. Please build and push an image first."
              exit 1
            fi

            CLASSIFIER_API_IMAGE="gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.CLASSIFIER_API_IMAGE_NAME }}:$TAG"
          fi

          echo "green_fashion_image=$GREEN_FASHION_IMAGE" >> $GITHUB_OUTPUT
          echo "classifier_api_image=$CLASSIFIER_API_IMAGE" >> $GITHUB_OUTPUT

      - name: Terraform init
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: terraform init

      - name: Terraform plan
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          TF_VAR_project_id: ${{ env.GCP_PROJECT_ID }}
          TF_VAR_environment: ${{ needs.changes.outputs.environment }}
          TF_VAR_container_image: ${{ steps.images.outputs.green_fashion_image }}
          TF_VAR_classifier_api_container_image: ${{ steps.images.outputs.classifier_api_image }}
        run: |
          terraform plan -var-file="${{ needs.changes.outputs.tfvars_file }}" -out=tfplan
          terraform show -no-color tfplan > plan-output.txt

      - name: Terraform apply
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          TF_VAR_project_id: ${{ env.GCP_PROJECT_ID }}
          TF_VAR_environment: ${{ needs.changes.outputs.environment }}
          TF_VAR_container_image: ${{ steps.images.outputs.green_fashion_image }}
          TF_VAR_classifier_api_container_image: ${{ steps.images.outputs.classifier_api_image }}
        run: terraform apply -auto-approve tfplan

      - name: Get service URL and health check
        working-directory: ./terraform
        run: |
          SERVICE_URL=$(terraform output -raw api_url)
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

          echo "Waiting for service to be ready..."
          sleep 60

          for i in {1..5}; do
            if curl -f "$SERVICE_URL/health"; then
              echo "✅ Health check passed"
              echo "🚀 Deployment successful to ${{ needs.changes.outputs.environment }}: $SERVICE_URL" >> $GITHUB_STEP_SUMMARY
              echo "📦 Container image: ${{ steps.image.outputs.container_image }}" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi
            echo "⏳ Attempt $i failed, retrying in 30s..."
            sleep 30
          done

          echo "❌ Health check failed after 5 attempts"
          exit 1
