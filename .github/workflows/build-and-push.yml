name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    paths:
      # Trigger when application code changes
      - 'green_fashion/**'
      - 'streamlit_app/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.dockerignore'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'green_fashion/**'
      - 'streamlit_app/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.dockerignore'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  IMAGE_NAME: green-fashion

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Test Docker container
      if: github.event_name == 'pull_request'
      run: |
        # Pull the image we just built
        docker pull ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

        # Run basic container test
        docker run --rm -d -p 8080:8080 --name test-container ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        sleep 30

        # Test health endpoint
        curl -f http://localhost:8080/_stcore/health || exit 1

        # Clean up
        docker stop test-container

    - name: Output image details
      run: |
        echo "Built image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
        echo "Image digest: ${{ steps.build.outputs.digest }}"
        echo "image-tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT
